<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nguyen Nguyen</title>
    <description>Blogging is cool?</description>
    <link>http://0.0.0.0:4000</link>
    
      
        <item>
          <title>Errbot on Slack</title>
          <description>&lt;h3 id=&quot;chat-clients&quot;&gt;Chat Clients&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt; is a great chat client. 
It’s incomparably better than &lt;strong&gt;Skype&lt;/strong&gt;, &lt;strong&gt;Lync&lt;/strong&gt;, &lt;strong&gt;Spark&lt;/strong&gt; and &lt;strong&gt;Hangouts&lt;/strong&gt;
for collaborative teams and developers. 
&lt;strong&gt;&lt;a href=&quot;https://www.hipchat.com&quot;&gt;Hipchat&lt;/a&gt;&lt;/strong&gt; is a contender 
but lacks many great features that 
Slack offers out of the box: saving a conversation context, 
up arrow editing ( like Skype’s ), better code snippets, 
completions for IRC-like commands,
 &lt;a href=&quot;http://slackhq.com/post/130081834025/refreshing-posts-20&quot;&gt;chat posts&lt;/a&gt;, 
 pinning messages and files to a chat, etc..&lt;/p&gt;

&lt;p&gt;There’s also &lt;strong&gt;&lt;a href=&quot;https://demo.rocket.chat/home&quot;&gt;Rocket.Chat&lt;/a&gt;&lt;/strong&gt;
which seems similar to Slack’s features on the surface, 
but I have not had the commitment to try it out; it’s also open source.&lt;/p&gt;

&lt;p&gt;Lets do more cool things with Slack; 
adding a bot and get into &lt;strong&gt;&lt;a href=&quot;https://www.pagerduty.com/what-is-chatops&quot;&gt;Chatops&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;bots&quot;&gt;Bots&lt;/h3&gt;
&lt;p&gt;There are a lot of bots out there for different languages, 
but preferring python, &lt;strong&gt;&lt;a href=&quot;http://errbot.io/&quot;&gt;Errbot&lt;/a&gt;&lt;/strong&gt; was the choice for me.
Errobot integrates with all sorts of things, 
and amazingly simple to integrate with Slack. 
Errbot’s &lt;a href=&quot;http://errbot.io/user_guide/plugin_development/basics.html&quot;&gt;Hello world!&lt;/a&gt; guide is pretty 
useful if you want to use it as a reference.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-errbot&quot;&gt;Setting up Errbot&lt;/h3&gt;
&lt;p&gt;With all python project, set up a &lt;strong&gt;&lt;a href=&quot;https://virtualenv.readthedocs.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;&lt;/strong&gt; and install these dependencies:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install slackclient errbot&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;organizing-the-project&quot;&gt;Organizing the project&lt;/h3&gt;
&lt;p&gt;Create a directory structure like so…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/wally
/wally/plugins
/wally/plugins/goodbye/goodbye.plug
/wally/plugins/goodbye/goodbye.py
/wally/config.py
/wally/data
/wally/logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a bit of work, but I promise the Slack part will be a breeze. 
Now lets see what they folders do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;/wally&lt;/strong&gt; - this is our bot’s top dir obviously..&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/plugins&lt;/strong&gt; - a folder for plugins, each plugin extension should have it’s own subfolder.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/plugins/goodbye/goodbye.plug&lt;/strong&gt; - the plugin’s meta&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/plugins/goodbye/goodbye.py&lt;/strong&gt; - the plugin’s code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/config.py&lt;/strong&gt; - configurations for Errbot&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/data&lt;/strong&gt; - local data store files that Errbot uses&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/wally/logs&lt;/strong&gt; - where the logs that Errbot generates will go&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;goodbyeplug--stolen-and-modified-&quot;&gt;goodbye.plug ( stolen and modified )&lt;/h3&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Core]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GoodbyeEva&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goodbye&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Python]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2+&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Documentation]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Wally saying goodbye to Eva..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;goodbyepy--stolen-and-modified-&quot;&gt;goodbye.py ( stolen and modified )&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;errbot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BotPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botcmd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoodbyeEva&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BotPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;A farewell to Eva plugin&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@botcmd&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goodbye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Say goodbye to this Eva..&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Goodbye, Eva....'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configpy&quot;&gt;config.py&lt;/h3&gt;
&lt;p&gt;A template of config.py 
can be found here &lt;em&gt;&lt;a href=&quot;https://github.com/errbotio/errbot/blob/master/errbot/config-template.py&quot;&gt;config-template.py&lt;/a&gt;&lt;/em&gt;. 
Copy the contents over.&lt;/p&gt;

&lt;p&gt;Update these properties in the config, 
the notes in there are great 
if you’re interested in the details, 
but the property’s names are self-explained.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BOT_DATA_DIR = './data'
BOT_EXTRA_PLUGIN_DIR = './plugins'
BOT_LOG_FILE = './logs/log.txt'
BOT_LOG_LEVEL = logging.DEBUG # This will be more useful than the default
BOT_IDENTITY = {} # Comment out the defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-test-run&quot;&gt;A Test Run&lt;/h3&gt;
&lt;p&gt;That should be it! &lt;code class=&quot;highlighter-rouge&quot;&gt;errbot&lt;/code&gt; should be available as a binary, 
to run it in locally in a chat emulator..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;errbot --text&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hopefully this should work smoothly 
and should put you in a chat prompt 
where you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;!help&lt;/code&gt;. 
You should see a help for &lt;strong&gt;GoodbyeEva&lt;/strong&gt; plugin, 
if not go through the logs in the console for warnings and errors; 
unfortunately plugin failures are silent.&lt;/p&gt;

&lt;h3 id=&quot;the-slack-part&quot;&gt;The Slack part&lt;/h3&gt;
&lt;p&gt;Finally we are here, thanks for sticking around! 
The easiest way to integrate with Slack is to create a &lt;strong&gt;bot user&lt;/strong&gt; 
for your team. 
Head over to &lt;a href=&quot;https://api.slack.com/bot-users&quot;&gt;Slack’s bot user&lt;/a&gt; to create a new bot user. 
Once you’re done with that, you’ll be on the new bot user’s page. 
Here all we will need is the &lt;em&gt;API Token&lt;/em&gt; under &lt;strong&gt;Integration Settings &amp;gt; API Token&lt;/strong&gt;, 
should look something like this &lt;strong&gt;xoxb-1234567890-supersecretpseudorandomstring&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Alright we got the token we need, 
now back to &lt;strong&gt;config.py&lt;/strong&gt; and its &lt;strong&gt;BOT_IDENTITY&lt;/strong&gt; property. 
Uncomment the token key under “Slack mode” and add your token here. 
That. is. it. To start it up simple run &lt;code class=&quot;highlighter-rouge&quot;&gt;errbot&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;errbot --slack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There’s one more thing we need to do, 
add the user bot to a room 
and then you can start interacting with WallyBot, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;!help&lt;/code&gt;.&lt;/p&gt;

</description>
          <pubDate>2016-02-02T00:00:00-06:00</pubDate>
          <link>http://0.0.0.0:4000/notes/errbot-on-slack</link>
          <guid isPermaLink="true">http://0.0.0.0:4000/notes/errbot-on-slack</guid>
        </item>
      
    
      
        <item>
          <title>Heroku, gunicorn and flask wsgi app.</title>
          <description>&lt;p&gt;A walk through and summarization of 
&lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-python-o&quot;&gt;Heroku’s getting started guide&lt;/a&gt; 
to host a flask application on Heroku.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface&quot;&gt;wsgi&lt;/a&gt;&lt;/strong&gt;: A spefication that defines an interface for how web servers and web application communicated.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://gunicorn.org/&quot;&gt;gunicorn&lt;/a&gt;&lt;/strong&gt;: A wsgi implementation of a http server to handle http requests routing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;flask&lt;/a&gt;&lt;/strong&gt;: The web framework where we will define our application logic based on incoming requests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;heroku&lt;/a&gt;&lt;/strong&gt;: Where we will host our code and make it available on the open internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-prepping-an-isolated-python-environment&quot;&gt;1. Prepping an isolated python environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll create a directory for our project and start up a new &lt;a href=&quot;https://virtualenv.readthedocs.org/en/latest/&quot;&gt;virtualenv&lt;/a&gt;. This will give us an isolated python environment to play around in:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;goodbye
  &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;goodbye
  virtualenv &lt;span class=&quot;nt&quot;&gt;--no-site-packages&lt;/span&gt; venv
  &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;strong&gt;requirements.txt&lt;/strong&gt; file with contents:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Flask==0.10.1
  gunicorn==19.4.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then install them, in a terminal run..&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-create-a-simple-goodbye-flask-app-with-gunicorn&quot;&gt;2. Create a simple goodbye flask app with gunicorn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create an &lt;strong&gt;app.py&lt;/strong&gt; file under the &lt;strong&gt;goodbye&lt;/strong&gt; directory with contents:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goodbye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Goodbye world...'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Your directory should now look like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /goodbye/
  ____ requirements.txt
  ____ app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start up the app on localhost! Your app should be available at localhost:8000. run…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gunicorn app:app --reload -b 127.0.0.1:8000&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;–reload&lt;/strong&gt; will ask gunicorn to reload the server if there are any changes to  your flask app. &lt;strong&gt;-b&lt;/strong&gt; binds our application to 127.0.0.1 address at port 8000&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-add-your-project-version-control&quot;&gt;3. Add your project version control&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;git&lt;/a&gt; we’ll version control our project, run..&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git init
  git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'add a simple flask app with gunicorn'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ll also want to ignore a few things from version control. Create a &lt;strong&gt;.gitignore&lt;/strong&gt; file with contents:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  venv
  *.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Your project should now look like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /goodbye/
  ____ requirements.txt
  ____ app.py
  ____ .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-hosting-our-application-on-heroku&quot;&gt;4. Hosting our application on Heroku&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Login to heroku, you’ll need to make an account. run…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a heroku app with our project, heroku will gives us a random name. run…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give heroku instructions to start up our app. Create a &lt;strong&gt;Procfile&lt;/strong&gt; file under the &lt;strong&gt;goodbye&lt;/strong&gt; directory with contents:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web: gunicorn app:app --log-file=-&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This tells heroku to start up the application with gunicorn on a web node where the application is hosted.
  Your directory should now look like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /goodbye/
  ____ requirements.txt
  ____ app.py
  ____ Procfile
  ____ .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we move our project up to the heroku platform. run…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku head&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it’s finish, we can open our hosted applpication. run…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heroku open&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>2015-12-31T00:00:00-06:00</pubDate>
          <link>http://0.0.0.0:4000/notes/gunicorn-flask-wsgi-heroku</link>
          <guid isPermaLink="true">http://0.0.0.0:4000/notes/gunicorn-flask-wsgi-heroku</guid>
        </item>
      
    
  </channel>
</rss>
